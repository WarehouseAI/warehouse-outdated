version: '3'

networks:
  server-network:
    driver: bridge
volumes:
  migrations:

services:
  proxy:
    image: nginx:1.24-alpine
    container_name: proxy_server
    restart: unless-stopped
    tty: true
    ports:
      - 80:80
    depends_on:
      - auth
      - user
      - ai
      - stat
    volumes:
      - ./:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - server-network

  db-auth:
    image: postgres:14.10-alpine3.19
    container_name: token-database
    networks:
      - server-network
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: '${AUTH_DB_USER}'
      POSTGRES_PASSWORD: '${AUTH_DB_PASS}'
      POSTGRES_DB: '${AUTH_DB_NAME}'
    ports:
      - '${AUTH_DB_PORT}:5432'
    volumes:
      - ./migrations/setup-auth-db.sql:/docker-entrypoint-initdb.d/setup-auth-db.sql

  db-users:
    image: postgres:14.10-alpine3.19
    container_name: users-database
    networks:
      - server-network
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: '${USERS_DB_USER}'
      POSTGRES_PASSWORD: '${USERS_DB_PASS}'
      POSTGRES_DB: '${USERS_DB_NAME}'
      POSTGRES_PUB_NAME: '${USERS_DB_PUB_NAME}'
    ports:
      - '${USERS_DB_PORT}:5432'
    volumes:
      - ./migrations/setup-users-db.sql:/docker-entrypoint-initdb.d/setup-users-db.sql
      - ./migrations/setup-users-pub.sql:/docker-entrypoint-initdb.d/setup-users-pub.sql

  db-ai:
    image: postgres:14.10-alpine3.19
    container_name: ai-database
    networks:
      - server-network
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: '${AI_DB_USER}'
      POSTGRES_PASSWORD: '${AI_DB_PASS}'
      POSTGRES_DB: '${AI_DB_NAME}'
      POSTGRES_PUB_NAME: '${AI_DB_PUB_NAME}'
    ports:
      - '${AI_DB_PORT}:5432'
    volumes:
      - ./migrations/setup-ai-db.sql:/docker-entrypoint-initdb.d/setup-ai-db.sql
      - ./migrations/setup-ai-pub.sql:/docker-entrypoint-initdb.d/setup-ai-pub.sql

  db-stat:
    image: postgres:14.1-alpine
    container_name: stat-database
    networks:
      - server-network
    restart: always
    depends_on:
      - db-ai
      - db-users
    env_file:
      - .env
    environment:
      POSTGRES_USER: '${STAT_DB_USER}'
      POSTGRES_PASSWORD: '${STAT_DB_PASS}'
      POSTGRES_DB: '${STAT_DB_NAME}'
    ports:
      - '${STAT_DB_PORT}:5432'
    volumes:
      - ./migrations/setup-stat-db.sql:/docker-entrypoint-initdb.d/setup-stat-db.sql
      - ./migrations/setup-stat-sub.sql:/docker-entrypoint-initdb.d/setup-stat-sub.sql

  session:
    image: redis:6.2-alpine
    container_name: db-session
    restart: always
    networks:
      - server-network
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - '${RMQ_PORT}:5672'
      - 15672:15672
    restart: always
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: '${RMQ_USER}'
      RABBITMQ_DEFAULT_PASS: '${RMQ_PASS}'
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit disk_free_limit 2147483648
    networks:
      - server-network

  auth:
    restart: always
    container_name: auth
    networks:
      - server-network
    build:
      context: .
      dockerfile: dockerfiles/auth.Dockerfile
    command: ./wait-4-postgres.sh db-auth ./auth
    depends_on:
      - session
      - db-auth
      - rabbitmq
    env_file: .env
    environment:
      DB_NAME: '${AUTH_DB_NAME}'
      DB_PASS: '${AUTH_DB_PASS}'
      DB_USER: '${AUTH_DB_USER}'
      DB_PORT: '${AUTH_DB_PORT}'
      TOKEN_REJECTED_QUEUE: 'verification_rejected'
    ports:
      - 8040:8040
      - 8041:8041

  user:
    restart: always
    container_name: user
    networks:
      - server-network
    build:
      context: .
      dockerfile: dockerfiles/user.Dockerfile
    command: ./wait-4-postgres.sh db-users ./user
    depends_on:
      - db-users
      - rabbitmq
    env_file: .env
    environment:
      DB_NAME: '${USERS_DB_NAME}'
      DB_PASS: '${USERS_DB_PASS}'
      DB_USER: '${USERS_DB_USER}'
      DB_PORT: '${USERS_DB_PORT}'
      TOKEN_REJECTED_QUEUE: 'verification_rejected'
    ports:
      - 8000:8000
      - 8001:8001

  mail:
    restart: always
    container_name: mail
    networks:
      - server-network
    env_file: .env
    build:
      context: .
      dockerfile: dockerfiles/mail.Dockerfile
    command: ./mail
    depends_on:
      - user
      - auth
      - rabbitmq

  ai:
    restart: always
    container_name: ai
    networks:
      - server-network
    build:
      context: .
      dockerfile: dockerfiles/ai.Dockerfile
    command: ./wait-4-postgres.sh db-ai ./ai
    depends_on:
      - db-ai
    env_file: .env
    ports:
      - 8020:8020
      - 8021:8021

  stat:
    restart: always
    container_name: stat
    networks:
      - server-network
    build:
      context: .
      dockerfile: dockerfiles/stat.Dockerfile
    command: ./wait-4-postgres.sh db-stat ./stat
    depends_on:
      - db-stat
    env_file: .env
    ports:
      - 8022:8022
      - 8023:8023
