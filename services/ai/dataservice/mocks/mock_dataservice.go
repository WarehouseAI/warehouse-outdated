// Code generated by MockGen. DO NOT EDIT.
// Source: services/ai/dataservice/dataservice.go
//
// Generated by this command:
//
//	mockgen -source=services/ai/dataservice/dataservice.go -destination=services/ai/dataservice/mocks/mock_dataservice.go
//
// Package mock_dataservice is a generated GoMock package.
package mock_dataservice

import (
	multipart "mime/multipart"
	reflect "reflect"
	errors "warehouseai/ai/errors"
	model "warehouseai/ai/model"

	gomock "go.uber.org/mock/gomock"
)

// MockAiInterface is a mock of AiInterface interface.
type MockAiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAiInterfaceMockRecorder
}

// MockAiInterfaceMockRecorder is the mock recorder for MockAiInterface.
type MockAiInterfaceMockRecorder struct {
	mock *MockAiInterface
}

// NewMockAiInterface creates a new mock instance.
func NewMockAiInterface(ctrl *gomock.Controller) *MockAiInterface {
	mock := &MockAiInterface{ctrl: ctrl}
	mock.recorder = &MockAiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAiInterface) EXPECT() *MockAiInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAiInterface) Create(token *model.AiProduct) *errors.DBError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", token)
	ret0, _ := ret[0].(*errors.DBError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAiInterfaceMockRecorder) Create(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAiInterface)(nil).Create), token)
}

// Get mocks base method.
func (m *MockAiInterface) Get(conditions map[string]any) (*model.AiProduct, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", conditions)
	ret0, _ := ret[0].(*model.AiProduct)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAiInterfaceMockRecorder) Get(conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAiInterface)(nil).Get), conditions)
}

// GetLike mocks base method.
func (m *MockAiInterface) GetLike(field, value string) (*[]model.AiProduct, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLike", field, value)
	ret0, _ := ret[0].(*[]model.AiProduct)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// GetLike indicates an expected call of GetLike.
func (mr *MockAiInterfaceMockRecorder) GetLike(field, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLike", reflect.TypeOf((*MockAiInterface)(nil).GetLike), field, value)
}

// GetMany mocks base method.
func (m *MockAiInterface) GetMany(ids []string) (*[]model.AiProduct, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].(*[]model.AiProduct)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockAiInterfaceMockRecorder) GetMany(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockAiInterface)(nil).GetMany), ids)
}

// GetWithPreload mocks base method.
func (m *MockAiInterface) GetWithPreload(conditions map[string]any, preload string) (*model.AiProduct, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPreload", conditions, preload)
	ret0, _ := ret[0].(*model.AiProduct)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// GetWithPreload indicates an expected call of GetWithPreload.
func (mr *MockAiInterfaceMockRecorder) GetWithPreload(conditions, preload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPreload", reflect.TypeOf((*MockAiInterface)(nil).GetWithPreload), conditions, preload)
}

// Update mocks base method.
func (m *MockAiInterface) Update(ai *model.AiProduct, updatedFields map[string]any) *errors.DBError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ai, updatedFields)
	ret0, _ := ret[0].(*errors.DBError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAiInterfaceMockRecorder) Update(ai, updatedFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAiInterface)(nil).Update), ai, updatedFields)
}

// MockCommandInterface is a mock of CommandInterface interface.
type MockCommandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandInterfaceMockRecorder
}

// MockCommandInterfaceMockRecorder is the mock recorder for MockCommandInterface.
type MockCommandInterfaceMockRecorder struct {
	mock *MockCommandInterface
}

// NewMockCommandInterface creates a new mock instance.
func NewMockCommandInterface(ctrl *gomock.Controller) *MockCommandInterface {
	mock := &MockCommandInterface{ctrl: ctrl}
	mock.recorder = &MockCommandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandInterface) EXPECT() *MockCommandInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommandInterface) Create(token *model.AiCommand) *errors.DBError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", token)
	ret0, _ := ret[0].(*errors.DBError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommandInterfaceMockRecorder) Create(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommandInterface)(nil).Create), token)
}

// Get mocks base method.
func (m *MockCommandInterface) Get(conditions map[string]any) (*model.AiCommand, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", conditions)
	ret0, _ := ret[0].(*model.AiCommand)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommandInterfaceMockRecorder) Get(conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommandInterface)(nil).Get), conditions)
}

// GetWithPreload mocks base method.
func (m *MockCommandInterface) GetWithPreload(conditions map[string]any, preload string) (*model.AiCommand, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPreload", conditions, preload)
	ret0, _ := ret[0].(*model.AiCommand)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// GetWithPreload indicates an expected call of GetWithPreload.
func (mr *MockCommandInterfaceMockRecorder) GetWithPreload(conditions, preload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPreload", reflect.TypeOf((*MockCommandInterface)(nil).GetWithPreload), conditions, preload)
}

// MockPictureInterface is a mock of PictureInterface interface.
type MockPictureInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPictureInterfaceMockRecorder
}

// MockPictureInterfaceMockRecorder is the mock recorder for MockPictureInterface.
type MockPictureInterfaceMockRecorder struct {
	mock *MockPictureInterface
}

// NewMockPictureInterface creates a new mock instance.
func NewMockPictureInterface(ctrl *gomock.Controller) *MockPictureInterface {
	mock := &MockPictureInterface{ctrl: ctrl}
	mock.recorder = &MockPictureInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPictureInterface) EXPECT() *MockPictureInterfaceMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method.
func (m *MockPictureInterface) DeleteImage(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockPictureInterfaceMockRecorder) DeleteImage(fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockPictureInterface)(nil).DeleteImage), fileName)
}

// UploadFile mocks base method.
func (m *MockPictureInterface) UploadFile(file multipart.File, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", file, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockPictureInterfaceMockRecorder) UploadFile(file, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockPictureInterface)(nil).UploadFile), file, fileName)
}

// MockRatingInterface is a mock of RatingInterface interface.
type MockRatingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRatingInterfaceMockRecorder
}

// MockRatingInterfaceMockRecorder is the mock recorder for MockRatingInterface.
type MockRatingInterfaceMockRecorder struct {
	mock *MockRatingInterface
}

// NewMockRatingInterface creates a new mock instance.
func NewMockRatingInterface(ctrl *gomock.Controller) *MockRatingInterface {
	mock := &MockRatingInterface{ctrl: ctrl}
	mock.recorder = &MockRatingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingInterface) EXPECT() *MockRatingInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRatingInterface) Add(rate *model.AiRate) *errors.DBError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", rate)
	ret0, _ := ret[0].(*errors.DBError)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRatingInterfaceMockRecorder) Add(rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRatingInterface)(nil).Add), rate)
}

// Get mocks base method.
func (m *MockRatingInterface) Get(conditions map[string]any) (*model.AiRate, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", conditions)
	ret0, _ := ret[0].(*model.AiRate)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRatingInterfaceMockRecorder) Get(conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRatingInterface)(nil).Get), conditions)
}

// GetAverageAiRating mocks base method.
func (m *MockRatingInterface) GetAverageAiRating(aiId string) (*float64, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageAiRating", aiId)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// GetAverageAiRating indicates an expected call of GetAverageAiRating.
func (mr *MockRatingInterfaceMockRecorder) GetAverageAiRating(aiId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageAiRating", reflect.TypeOf((*MockRatingInterface)(nil).GetAverageAiRating), aiId)
}

// GetCountAiRating mocks base method.
func (m *MockRatingInterface) GetCountAiRating(aiId string) (*int64, *errors.DBError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAiRating", aiId)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(*errors.DBError)
	return ret0, ret1
}

// GetCountAiRating indicates an expected call of GetCountAiRating.
func (mr *MockRatingInterfaceMockRecorder) GetCountAiRating(aiId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAiRating", reflect.TypeOf((*MockRatingInterface)(nil).GetCountAiRating), aiId)
}

// Update mocks base method.
func (m *MockRatingInterface) Update(existRate *model.AiRate, newRate int16) *errors.DBError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", existRate, newRate)
	ret0, _ := ret[0].(*errors.DBError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRatingInterfaceMockRecorder) Update(existRate, newRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRatingInterface)(nil).Update), existRate, newRate)
}
